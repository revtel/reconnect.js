(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[876],{6054:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return u},metadata:function(){return r},toc:function(){return o},default:function(){return c}});var a=n(2122),l=n(9756),i=(n(7294),n(3905)),u={sidebar_position:3},r={unversionedId:"primitive-api",id:"primitive-api",isDocsHomePage:!1,title:"Primitive API",description:"Outlet",source:"@site/docs/primitive-api.md",sourceDirName:".",slug:"/primitive-api",permalink:"/reconnect.js/docs/primitive-api",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/primitive-api.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"React Hook API",permalink:"/reconnect.js/docs/react-hook-api"}},o=[{value:"Outlet",id:"outlet",children:[]},{value:"getNewOutlet",id:"getnewoutlet",children:[]},{value:"getOutlet",id:"getoutlet",children:[]},{value:"hasOutlet",id:"hasoutlet",children:[]},{value:"removeOutlet",id:"removeoutlet",children:[]}],s={toc:o};function c(e){var t=e.components,n=(0,l.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"outlet"},"Outlet"),(0,i.kt)("p",null,"An outlet let producers or consumers to publish or subscribe value changes."),(0,i.kt)("h4",{id:"signature"},"Signature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Outlet<T> {\n  /**\n   * Subscribe to value changes.\n   *\n   * @param handler - The value change listener function\n   * @returns A function to unregister the value change\n   */\n  register: (handler: valueChangeListener<T>) => unregisterOutlet;\n  /**\n   * Change the value backed by this outlet and publish to all subscribers.\n   *\n   * @param value - The value you'd like to change or a callback function to produce the value.\n   */\n  update: (value: nextValueOrGetter<T>) => void;\n  /**\n   * Get the value backed by this outlet\n   */\n  getValue: () => T;\n}\n")),(0,i.kt)("h3",{id:"getnewoutlet"},"getNewOutlet"),(0,i.kt)("p",null,"Get or create an outlet using given key."),(0,i.kt)("p",null,"This method first search global registry to see if the key has a corresponding outlet, if so returns it. Otherwise it will create a new outlet and set to global registry, then returns it."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"initialValue")," can be a callback function, which returns the actual value."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"options")," has a property ",(0,i.kt)("inlineCode",{parentName:"li"},"autoDelete"),", which indicates whether ",(0,i.kt)("inlineCode",{parentName:"li"},"Reconnect.js")," should automatically remove the outlet when the number of subscribers down to 0. The default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", but when you create outlets explicitly by calling ",(0,i.kt)("inlineCode",{parentName:"li"},"getNewOutlet"),", you should set it to false.")),(0,i.kt)("h4",{id:"signature-1"},"Signature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface OutletOptions {\n  autoDelete?: boolean;\n}\n\ndeclare function getNewOutlet<T>(\n  key: any,\n  initialValue: initialValueOrGetter<T>,\n  options?: OutletOptions,\n): Outlet<T>;\n")),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const ValueOutlet = getNewOutlet('value', 0, {autoDelete: false});\n\nif (typeof window !== undefined) {\n  // so you can call it from browser's inspector\n  window.addOne = () => {\n    ValueOutlet.update(ValueOutlet.getValue() + 1);\n  };\n}\n\nfunction App() {\n  return (\n    <div style={{padding: 10}}>\n      <Value />\n    </div>\n  );\n}\n\nfunction Value() {\n  const [value] = useOutlet('value');\n  return <h1>{value}</h1>;\n}\n")),(0,i.kt)("h3",{id:"getoutlet"},"getOutlet"),(0,i.kt)("p",null,"Get an existing outlet. If not found, throws an ",(0,i.kt)("inlineCode",{parentName:"p"},"OutletNotFoundError")),(0,i.kt)("h4",{id:"signature-2"},"Signature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"declare function getOutlet<T>(key: any): Outlet<T>;\n")),(0,i.kt)("h3",{id:"hasoutlet"},"hasOutlet"),(0,i.kt)("p",null,"Check if the outlet already exists."),(0,i.kt)("h4",{id:"signature-3"},"Signature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"declare function hasOutlet(key: any): boolean;\n")),(0,i.kt)("h3",{id:"removeoutlet"},"removeOutlet"),(0,i.kt)("p",null,"Force remove the outlet from global registry."),(0,i.kt)("h4",{id:"signature-4"},"Signature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"declare function removeOutlet(key: any): void;\n")))}c.isMDXComponent=!0}}]);