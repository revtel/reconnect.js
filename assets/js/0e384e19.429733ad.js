(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[671],{426:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return r},default:function(){return d}});var a=n(2122),o=n(9756),i=(n(7294),n(3905)),s={sidebar_position:1},l={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"Introduction",description:"Install",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/reconnect.js/docs/intro",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/intro.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"React Hook API",permalink:"/reconnect.js/docs/react-hook-api"}},r=[{value:"Install",id:"install",children:[]},{value:"What Is It?",id:"what-is-it",children:[]},{value:"Why Do I Need This?",id:"why-do-i-need-this",children:[{value:"Case 1: Share States Between Sibling Components",id:"case-1-share-states-between-sibling-components",children:[]},{value:"Case 2: Share States Between Deeply Nested Components",id:"case-2-share-states-between-deeply-nested-components",children:[]}]},{value:"That&#39;s why you might want to use Reconnect.js!",id:"thats-why-you-might-want-to-use-reconnectjs",children:[]}],u={toc:r};function d(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"install"},"Install"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"npm i reconnect.js")),(0,i.kt)("h2",{id:"what-is-it"},"What Is It?"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reconnect.js")," is the library to help you manage share states between ",(0,i.kt)("strong",{parentName:"p"},"sibling")," or ",(0,i.kt)("strong",{parentName:"p"},"deeply nested")," React Components."),(0,i.kt)("h2",{id:"why-do-i-need-this"},"Why Do I Need This?"),(0,i.kt)("h3",{id:"case-1-share-states-between-sibling-components"},"Case 1: Share States Between Sibling Components"),(0,i.kt)("p",null,"React can pass state into child components easily. But if you'd like to share states between sibling components, normally you will have to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"create the state in your parent component"),(0,i.kt)("li",{parentName:"ul"},"pass the value down as props into child components"),(0,i.kt)("li",{parentName:"ul"},"pass the setter function down as props into child components if child components need to modify them")),(0,i.kt)("h3",{id:"case-2-share-states-between-deeply-nested-components"},"Case 2: Share States Between Deeply Nested Components"),(0,i.kt)("p",null,"When things come to deeply nested components, it's getting worse."),(0,i.kt)("p",null,"If you'd like to share states between some deeply nested components, you normally has two options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"React Context"),". Not that trivial, the rough steps looks like this:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Create a context via ",(0,i.kt)("inlineCode",{parentName:"li"},"React.createContext()")),(0,i.kt)("li",{parentName:"ul"},"Create ",(0,i.kt)("inlineCode",{parentName:"li"},"Provider")," component, wrap the ",(0,i.kt)("inlineCode",{parentName:"li"},"Context.Provider")),(0,i.kt)("li",{parentName:"ul"},"Put the state you'd like to share into the created ",(0,i.kt)("inlineCode",{parentName:"li"},"Provider")),(0,i.kt)("li",{parentName:"ul"},"Export your context instance. For the components who'd like to access the shared state, import it and call ",(0,i.kt)("inlineCode",{parentName:"li"},"useContext"),"."),(0,i.kt)("li",{parentName:"ul"},"BTW, if you'd like to modify the state from child components, normally you will need to create a separated Context and Provider. So you will have to iterate through above steps again."))),(0,i.kt)("li",{parentName:"ul"},"Or, you might choose to use another ",(0,i.kt)("inlineCode",{parentName:"li"},"state management library")," such as ",(0,i.kt)("inlineCode",{parentName:"li"},"Redux"),", that brings another layers of complexity. These libraries are awesome, but sometimes you just want things to be simpler.")),(0,i.kt)("h2",{id:"thats-why-you-might-want-to-use-reconnectjs"},"That's why you might want to use Reconnect.js!"),(0,i.kt)("p",null,"Let's see a quick demo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport {useOutlet, useOutletSetter, useOutletDeclaration} from 'reconnect.js';\n\nfunction App() {\n  useOutletDeclaration('add', 0);\n  return (\n    <div style={{padding: 10}}>\n      <Value />\n      <ActionBar />\n    </div>\n  );\n}\n\nfunction Value() {\n  const [value] = useOutlet('add');\n  return <h1>{value}</h1>;\n}\n\nfunction ActionBar(props) {\n  return (\n    <div>\n      <Add />\n      <Sub />\n      <Reset />\n    </div>\n  );\n}\n\nfunction Add() {\n  const [value, setValue] = useOutlet('add');\n  return <button onClick={() => setValue(value + 1)}>+1</button>;\n}\n\nfunction Sub() {\n  const [_, setValue] = useOutlet('add');\n  return <button onClick={() => setValue((value) => value - 1)}>-1</button>;\n}\n\nfunction Reset() {\n  const setValue = useOutletSetter('add');\n  return <button onClick={() => setValue(0)}>RESET</button>;\n}\n\nexport default App;\n")),(0,i.kt)("p",null,"As you can see, the value backed by the ",(0,i.kt)("inlineCode",{parentName:"p"},"add")," outlet can be shared between:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sibling components like ",(0,i.kt)("inlineCode",{parentName:"li"},"Add")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Sub"),"."),(0,i.kt)("li",{parentName:"ul"},"Nested components like ",(0,i.kt)("inlineCode",{parentName:"li"},"Value")," and the children ",(0,i.kt)("inlineCode",{parentName:"li"},"Add")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Sub")," inside ",(0,i.kt)("inlineCode",{parentName:"li"},"ActionBar"),".")),(0,i.kt)("p",null,"It just works without extra configurations!"))}d.isMDXComponent=!0}}]);